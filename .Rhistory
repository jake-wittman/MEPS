TRUE ~ as.character(strata)))
# Rename strata to a blank name to remove it from the final table
preventive_service_table <- cleaned_preventive_df %>%
filter(strata != 'Other') %>%
group_by(stratifier) %>%
select(stratifier, ` ` = strata, `2008`:`2020`, `Percent Change (95% CI)`, `Joinpoint Year` = segment,
`APC Period 1`, `APC Period 2`, `AAPC`) %>%
mutate(stratifier = case_when(as.character(stratifier) == 'Poverty level' ~ 'Poverty income ratio',
TRUE ~ as.character(stratifier))) %>%
# Rename some columns to add () info
rename(`2008 (SE)` = `2008`,
`2009 (SE)` = `2009`,
`2010 (SE)` = `2010`,
`2011 (SE)` = `2011`,
`2012 (SE)` = `2012`,
`2013 (SE)` = `2013`,
`2014 (SE)` = `2014`,
`2015 (SE)` = `2015`,
`2016 (SE)` = `2016`,
`2017 (SE)` = `2017`,
`2018 (SE)` = `2018`,
`2019 (SE)` = `2019`,
`2020 (SE)` = `2020`,
`APC Period 1 (95% CI)` = `APC Period 1`,
`APC Period 2 (95% CI)` = `APC Period 2`,
`AAPC (95% CI)` = `AAPC`) %>%
gt() %>%
sub_missing(missing_text = ' ')
# Reorganize insurance variables
preventive_service_table$`_data` <- preventive_service_table$`_data`[c(1:14, 15, 18, 16, 17, 19:22), ]
tab1 <- preventive_service_table$`_data`
# Chunk 3: preventive-table-sans-2020
tar_load(ends_with('sans_2020'),
store = here::here('_targets/'))
# Clean up the AAPC table and get it into format for printing to table
cleaned_jp_aapc_sans_2020 <- jp_prevention_aapc_sans_2020 %>%
select(-aapc_index) %>%
mutate(aapc = specifyDecimal(aapc, digits = 1),
across(starts_with('aapc_'),
~specifyDecimal(x = .x, digits = 1)),
across(starts_with('aapc'),
~case_when(.x == ' NA' ~ NA_character_,
TRUE ~ .x)),
AAPC = case_when(!is.na(aapc) ~ glue::glue('{aapc} ({aapc_c_i_low}, {aapc_c_i_high})'),
TRUE ~ NA_character_)) %>%
select(stratifier, strata, AAPC)
# Format APC table for future joining
cleaned_jp_apc_sans_2020 <- jp_prevention_apc_sans_2020 %>%
# No model has more than a single joinpoint, so make wider and then
# remove the excess columns to determine if there's no join point (segmend_end = 2020)
# or a joinpoint (segment_end != 2019)
pivot_wider(id_cols = c(stratifier, strata, model),
names_from = segment,
values_from = c(segment_start, segment_end, apc, p_value, apc_significant,
apc_95_lcl, apc_95_ucl)
) %>%
select(-segment_start_0, -segment_start_1, -segment_end_1, -apc_significant_0, -apc_significant_1) %>%
# Make segment empty if no joinpoint
mutate(segment = case_when(segment_end_0 == 2019 ~ NA_integer_,
TRUE ~ segment_end_0)) %>%
# MAke apc empty if not significant
mutate(across(c(apc_0, apc_95_lcl_0, apc_95_ucl_0),
~ case_when(p_value_0 > 0.05 & p_value_1 > 0.05 ~ NA_real_,
TRUE ~ .x)),
across(c(apc_1, apc_95_lcl_1, apc_95_ucl_1),
~ case_when(p_value_0 > 0.05 & p_value_1 > 0.05 ~ NA_real_,
TRUE ~ .x)),
across(starts_with('apc_0') | starts_with('apc_1') | starts_with('p_'),
~specifyDecimal(.x, digits = 1)),
across(contains('cl'),
~specifyDecimal(.x, digits = 1)),
across(starts_with('apc') | starts_with('p_'),
~case_when(.x == 'NA' ~ NA_character_,
TRUE ~ .x))) %>%
# Concatenate apc column with CI columns
mutate(`APC Period 1` = case_when(
!is.na(apc_0) ~ glue::glue('{apc_0} ({apc_95_lcl_0}, {apc_95_ucl_0})'),
TRUE ~ NA_character_
),
`APC Period 2` = case_when(
!is.na(apc_1) ~ glue::glue('{apc_1} ({apc_95_lcl_1}, {apc_95_ucl_1})'),
TRUE ~ NA_character_
)
) %>%
select(stratifier, strata, segment, starts_with('APC '))
# Clean up the age adjusted preventive services and then join with the aapc table
clean_age_adjusted <- age_adjusted_preventive %>%
# Filter to just the >=3 services
filter(variable == 'zero_services') %>%
# Filter down to every other year
filter(year %in% seq(2000, 2020, by = 1)) %>%
mutate(chr_age_adj_prop = specifyDecimal(p, digits = 1),
p.std.error = p.std.error * 100,
age_adjusted_se_perc = specifyDecimal(p.std.error, digits = 1),
percentage = glue::glue('{chr_age_adj_prop} ({age_adjusted_se_perc})')) %>%
pivot_wider(
id_cols = c(stratifier, variable, label, strata),
names_from = year,
values_from = c(p, percentage, p.std.error),
) %>%
# Remove excess strata
filter(strata %!in% c('Not available', 'Other Race/Not Hispanic')) %>%
# Relevel stratifier factor, clean up stratifier and strata names
mutate(stratifier = factor(stratifier,
c('overall', 'age', 'sex', 'race', 'edu', 'insurance', 'poverty')),
strata = case_when(strata == 'stat_0' ~ '-',
strata == 'Greater than HS' ~ 'Greater than high school',
TRUE ~ strata),
percent_change = ((p_2019 - p_2008) / p_2008) * 100,
percent_change_se = (abs(p_2019 / p_2008) * sqrt((p.std.error_2019^2 / p_2019^2) + (p.std.error_2008^2 / p_2008^2)) * 100),
perc_change_lcl = percent_change - 1.96 * percent_change_se,
perc_change_ucl = percent_change + 1.96 * percent_change_se,
perc_change_char = specifyDecimal(percent_change, digits = 1),
perc_change_lcl_char = specifyDecimal(perc_change_lcl, digits = 1),
perc_change_ucl_char = specifyDecimal(perc_change_ucl, digits = 1),
`Percent Change (95% CI)` = glue::glue('{perc_change_char} ({perc_change_lcl_char}, {perc_change_ucl_char})')) %>%
select(-starts_with('age_adjusted_prop'), -starts_with('p.std.error'), -contains('_change_')) %>%
setNames(., str_replace(names(.), 'percentage_', "")) %>%
mutate(strata = as.factor(strata)) %>%
mutate(stratifier = recode_factor(
stratifier,
overall = 'Overall',
age = 'Age',
sex = 'Sex',
race = 'Race/Ethnicity',
edu = 'Highest degree earned',
insurance = 'Insurance coverage',
poverty = 'Poverty level'
)) %>%
# Join with AAPC table
left_join(cleaned_jp_aapc_sans_2020, by = c('stratifier', 'strata'))
cleaned_preventive_df_sans_2020 <- left_join(clean_age_adjusted, cleaned_jp_apc_sans_2020, by = c('stratifier', 'strata')) %>%
mutate(AAPC = case_when(is.na(AAPC) & is.na(`APC Period 2`) ~ `APC Period 1`,
TRUE ~ AAPC),
`APC Period 1` = case_when(is.na(`APC Period 1`) & is.na(`APC Period 2`) ~ AAPC,
TRUE ~ `APC Period 1`)) %>%
# Rename poverty levels
mutate(strata = case_when(as.character(strata) == 'Poor/Negative' ~ '< 100%',
as.character(strata) == 'Low income' ~ '100% - 199%',
as.character(strata) == 'Middle income' ~ '200% - 399%',
as.character(strata) == 'High income' ~ '> 400%',
TRUE ~ as.character(strata)))
# Rename strata to a blank name to remove it from the final table
preventive_service_table_sans_2020 <- cleaned_preventive_df_sans_2020 %>%
filter(strata != 'Other') %>%
group_by(stratifier) %>%
select(stratifier, ` ` = strata, `2008`:`2020`, `Percent Change (95% CI)`, `Joinpoint Year` = segment,
`APC Period 1`, `APC Period 2`, `AAPC`) %>%
mutate(stratifier = case_when(as.character(stratifier) == 'Poverty level' ~ 'Poverty income ratio',
TRUE ~ as.character(stratifier))) %>%
# Rename some columns to add () info
rename(`2008 (SE)` = `2008`,
`2009 (SE)` = `2009`,
`2010 (SE)` = `2010`,
`2011 (SE)` = `2011`,
`2012 (SE)` = `2012`,
`2013 (SE)` = `2013`,
`2014 (SE)` = `2014`,
`2015 (SE)` = `2015`,
`2016 (SE)` = `2016`,
`2017 (SE)` = `2017`,
`2018 (SE)` = `2018`,
`2019 (SE)` = `2019`,
`2020 (SE)` = `2020`,
`APC Period 1 (95% CI)` = `APC Period 1`,
`APC Period 2 (95% CI)` = `APC Period 2`,
`AAPC (95% CI)` = `AAPC`) %>%
gt() %>%
sub_missing(missing_text = ' ') %>%
tab_footnote(
footnote = "Values in these columns were estimated excluding data from 2020.",
locations = cells_column_labels(
columns = c(`Percent Change (95% CI)`,
`APC Period 1 (95% CI)`,
`APC Period 2 (95% CI)`,
`AAPC (95% CI)`
))
) %>%
tab_options(footnotes.marks = "a")
# Reorganize insurance variables
preventive_service_table_sans_2020$`_data` <- preventive_service_table_sans_2020$`_data`[c(1:14, 15, 18, 16, 17, 19:22), ]
tab_sans_2020 <- preventive_service_table_sans_2020$`_data`
# Chunk 4: proportion-table-sans-2020
# Clean up the AAPC table and get it into format for printing to table
cleaned_prop_aapc_sans_2020 <- jp_proportion_aapc_sans_2020 %>%
select(-aapc_index) %>%
mutate(aapc = specifyDecimal(aapc, digits = 1),
across(starts_with('aapc_'),
~specifyDecimal(x = .x, digits = 1)),
across(starts_with('aapc'),
~case_when(.x == ' NA' ~ NA_character_,
TRUE ~ .x)),
AAPC = case_when(!is.na(aapc) ~ glue::glue('{aapc} ({aapc_c_i_low}, {aapc_c_i_high})'),
TRUE ~ NA_character_)) %>%
select(stratifier, strata, service, AAPC)
# Format APC table for future joining
cleaned_prop_apc_sans_2020 <- jp_proportion_apc_sans_2020 %>%
# No model has more than a single joinpoint, so make wider and then
# remove the excess columns to determine if there's no join point (segmend_end = 2020)
# or a joinpoint (segment_end != 2019)
pivot_wider(id_cols = c(stratifier, strata, service, model),
names_from = segment,
values_from = c(segment_start, segment_end, apc, p_value, apc_significant,
apc_95_lcl, apc_95_ucl)
) %>%
mutate(
# This code here changes the apc values to NA if they aren't significant, but I think
# what I need to do is change the APC values if there are no identified joinpoints
# across(
#   c(apc_0, apc_95_lcl_0, apc_95_ucl_0),
#   ~ case_when(!is.na(segment_start_1) 0.05 &
#                 p_value_1 > 0.05 & p_value_2 > 0.05 & p_value_3 > 0.05 ~ NA_real_,
#               TRUE ~ .x)
# ),
# across(
#   c(apc_1, apc_95_lcl_1, apc_95_ucl_1),
#   ~ case_when(p_value_0 > 0.05 &
#                 p_value_1 > 0.05 & p_value_2 > 0.05 & p_value_3 > 0.05 ~ NA_real_,
#               TRUE ~ .x)
# ),
# across(
#   c(apc_2, apc_95_lcl_2, apc_95_ucl_2),
#   ~ case_when(p_value_0 > 0.05 &
#                 p_value_1 > 0.05 & p_value_2 > 0.05 & p_value_3 > 0.05 ~ NA_real_,
#               TRUE ~ .x)
# ),
# across(
#   c(apc_3, apc_95_lcl_3, apc_95_ucl_3),
#   ~ case_when(p_value_0 > 0.05 &
#                 p_value_1 > 0.05 & p_value_2 > 0.05 & p_value_3 > 0.05 ~ NA_real_,
#               TRUE ~ .x)
# ),
across(
matches('apc_[0-9]{1}') | starts_with('p_'),
~ specifyDecimal(.x, digits = 1)
)
) %>%
select(-contains('significant')) %>%
mutate(across(starts_with('apc') | starts_with('p_'),
~case_when(.x == 'NA' ~ NA_character_,
TRUE ~ .x))) %>%
# Concatenate apc column with CI columns
mutate(`APC Period 1` = case_when(
!is.na(apc_0) ~ glue::glue('{apc_0} ({apc_95_lcl_0}, {apc_95_ucl_0})'),
TRUE ~ NA_character_
),
`APC Period 2` = case_when(
!is.na(apc_1) ~ glue::glue('{apc_1} ({apc_95_lcl_1}, {apc_95_ucl_1})'),
TRUE ~ NA_character_
),
`APC Period 3` = case_when(
!is.na(apc_2) ~ glue::glue('{apc_2} ({apc_95_lcl_2}, {apc_95_ucl_2})'),
TRUE ~ NA_character_
),
`APC Period 4` = case_when(
!is.na(apc_3) ~ glue::glue('{apc_3} ({apc_95_lcl_3}, {apc_95_ucl_3})'),
TRUE ~ NA_character_
)
) %>%
# Make segment empty if no joinpoint
mutate(segment = ifelse(!is.na(segment_start_1) & !is.na(segment_start_2) & !is.na(segment_start_3),
paste(segment_start_1, segment_start_2, segment_start_3, sep = ", "),
ifelse(!is.na(segment_start_1) & !is.na(segment_start_2) & is.na(segment_start_3),
paste(segment_start_1, segment_start_2, sep = ", "),
ifelse(!is.na(segment_start_1) & is.na(segment_start_2) & is.na(segment_start_3),
segment_start_1,
ifelse(segment_end_0 == 2019, NA_character_, 'Check me')
)
)
)
) %>%
# MAke apc empty if not significant
select(stratifier, strata, service, segment, starts_with('APC '), -segment_start_0, -segment_start_1, -segment_end_1)
# Clean up the age adjusted preventive services and then join with the aapc table
clean_age_adjusted_prop <- age_adjusted_stats %>%
# Filter to just the >=3 services
#filter(label == 'At least three preventive services followed') %>%
# Filter down to every other year
filter(year %in% seq(2000, 2020, by = 1)) %>%
mutate(chr_age_adj_prop = specifyDecimal(p, digits = 1),
p.std.error = p.std.error * 100,
age_adjusted_se_perc = specifyDecimal(p.std.error, digits = 1),
percentage = glue::glue('{chr_age_adj_prop} ({age_adjusted_se_perc})')) %>%
pivot_wider(
id_cols = c(stratifier, variable, label, strata),
names_from = year,
values_from = c(p, percentage, p.std.error),
) %>%
# Calculate average proportion for all years and SE
rowwise() %>%
mutate(p_average = mean(c_across(p_2008:p_2019)),
p_se = sd(c_across(p_2008:p_2019)) / sqrt(13),
p_lci = p_average - 1.96 * p_se,
p_uci = p_average + 1.96 * p_se) %>%
ungroup() %>%
# Now combine
mutate(p_average_chr = specifyDecimal(p_average, digits = 1),
p_se_chr = specifyDecimal(p_se, digits = 1),
`Average` = glue::glue('{p_average_chr} ({p_se_chr})')) %>%
# Remove excess strata
filter(strata %!in% c('Not available', 'Other Race/Not Hispanic')) %>%
# Relevel stratifier factor, clean up stratifier and strata names
mutate(stratifier = factor(stratifier,
c('overall', 'age', 'sex', 'race', 'edu', 'insurance', 'poverty')),
strata = case_when(strata == 'stat_0' ~ '-',
strata == 'Greater than HS' ~ 'Greater than high school',
TRUE ~ strata),
percent_change = ((p_2019 - p_2008) / p_2008) * 100,
percent_change_se = (abs(p_2019 / p_2008) * sqrt((p.std.error_2019^2 / p_2019^2) + (p.std.error_2008^2 / p_2008^2)) * 100),
perc_change_lcl = percent_change - 1.96 * percent_change_se,
perc_change_ucl = percent_change + 1.96 * percent_change_se,
perc_change_char = specifyDecimal(percent_change, digits = 1),
perc_change_lcl_char = specifyDecimal(perc_change_lcl, digits = 1),
perc_change_ucl_char = specifyDecimal(perc_change_ucl, digits = 1),
`Percent Change (95% CI)` = glue::glue('{perc_change_char} ({perc_change_lcl_char}, {perc_change_ucl_char})')) %>%
select(-starts_with('age_adjusted_prop'), -starts_with('p.std.error'), -contains('_change_')) %>%
setNames(., str_replace(names(.), 'percentage_', "")) %>%
mutate(strata = as.factor(strata)) %>%
mutate(stratifier = recode_factor(
stratifier,
overall = 'Overall',
age = 'Age',
sex = 'Sex',
race = 'Race/Ethnicity',
edu = 'Highest degree earned',
insurance = 'Insurance coverage',
poverty = 'Poverty level'
)) %>%
# Join with AAPC table
left_join(cleaned_prop_aapc_sans_2020, by = c('stratifier', 'strata', 'variable' = 'service'))
cleaned_proportion_df_sans_2020 <- left_join(clean_age_adjusted_prop, cleaned_prop_apc_sans_2020, by = c('stratifier', 'strata', 'variable' = 'service')) %>%
mutate(AAPC = case_when(is.na(AAPC) & is.na(`APC Period 2`) & is.na(`APC Period 3`) ~ `APC Period 1`,
TRUE ~ AAPC),
`APC Period 1` = case_when(is.na(`APC Period 1`) & is.na(`APC Period 2`) ~ AAPC,
TRUE ~ `APC Period 1`)) %>%
# Rename poverty levels
mutate(strata = case_when(as.character(strata) == 'Poor/Negative' ~ '< 100%',
as.character(strata) == 'Low income' ~ '100% - 199%',
as.character(strata) == 'Middle income' ~ '200% - 399%',
as.character(strata) == 'High income' ~ '> 400%',
TRUE ~ as.character(strata)))
# Rename strata to a blank name to remove it from the final table
prop_tab_sans_2020 <- cleaned_proportion_df_sans_2020 %>%
filter(strata != 'Other') %>%
group_by(variable) %>%
mutate(strata = case_when(strata == '-' ~ 'Overall', TRUE ~ strata)) %>%
mutate(variable = case_when(variable == 'a1c' ~ 'Two or more A1C tests',
variable == 'CHOL_all' ~ 'Cholesterol tested',
variable == 'DENT_all' ~ 'One or more dentist visits',
variable == 'eye-exam' ~ 'Dilated eye exam',
variable == 'flu' ~ 'Received influenza vaccine',
variable == 'foot' ~ 'Foot examination')) %>%
# Select table variables
select(
stratifier,
` ` = strata,
`Preventive service` = variable,
`Average (SE)` = Average,
`2008`:`2020`,
`Percent Change (95% CI)`,
`Joinpoint Year` = segment,
`APC Period 1`,
`APC Period 2`,
`APC Period 3`,
`APC Period 4`,
`AAPC`
) %>%
# Clean up name
mutate(stratifier = case_when(as.character(stratifier) == 'Poverty level' ~ 'Poverty income ratio',
TRUE ~ as.character(stratifier))) %>%
# Combine stratifier and strata names for table, then relevel factor for
# appropriate table order
mutate(` ` = case_when(stratifier == 'Overall' ~ 'Overall',
TRUE ~ paste(stratifier, ` `, sep = ": ")),
` ` = as.factor(` `) %>% fct_relevel('Overall',
'Age: 18 to 44',
'Age: 45 to 64',
'Age: 65 to 74',
'Age: 75+',
'Sex: Female',
'Sex: Male',
'Race/Ethnicity: Asian/Not Hispanic',
'Race/Ethnicity: Black/Not Hispanic',
'Race/Ethnicity: Hispanic',
'Race/Ethnicity: White/Not Hispanic',
'Highest degree earned: Greater than high school',
'Highest degree earned: High school',
'Highest degree earned: Less than high school',
'Insurance coverage: Medicaid',
'Insurance coverage: Medicare only',
'Insurance coverage: Private only',
'Insurance coverage: Uninsured',
'Poverty income ratio: > 400%',
'Poverty income ratio: 200% - 399%',
'Poverty income ratio: 100% - 199%',
'Poverty income ratio: < 100%')) %>%
# Clean up APC values
mutate(`APC (95% CI)` = paste(`APC Period 1`, `APC Period 2`, `APC Period 3`, `APC Period 4`, sep = ", ") %>%
str_replace(., ", NA", "") %>%
str_replace(., ", NA", "") %>%
str_replace(., ", NA", "")) %>%
# Rename some columns to add () info
rename(`2008 (SE)` = `2008`,
`2009 (SE)` = `2009`,
`2010 (SE)` = `2010`,
`2011 (SE)` = `2011`,
`2012 (SE)` = `2012`,
`2013 (SE)` = `2013`,
`2014 (SE)` = `2014`,
`2015 (SE)` = `2015`,
`2016 (SE)` = `2016`,
`2017 (SE)` = `2017`,
`2018 (SE)` = `2018`,
`2019 (SE)` = `2019`,
`2020 (SE)` = `2020`,
`APC Period 1 (95% CI)` = `APC Period 1`,
`APC Period 2 (95% CI)` = `APC Period 2`,
`APC Period 3 (95% CI)` = `APC Period 3`,
`APC Period 4 (95% CI)` = `APC Period 4`,
`AAPC (95% CI)` = `AAPC`)
proportion_table_sans_2020 <- prop_tab_sans_2020 %>%
ungroup() %>%
filter(stratifier == 'Overall') %>%
select(
`Preventive service`,
`Average (SE)`,
`2008 (SE)`,
`2009 (SE)`,
`2010 (SE)`,
`2011 (SE)`,
`2012 (SE)`,
`2013 (SE)`,
`2014 (SE)`,
`2015 (SE)`,
`2016 (SE)`,
`2017 (SE)`,
`2018 (SE)`,
`2019 (SE)`,
`2020 (SE)`,
`Percent Change (95% CI)`,
`Joinpoint Year`,
`APC (95% CI)`,
`AAPC (95% CI)`,
-starts_with('APC Period')
) %>%
gt() %>%
sub_missing(missing_text = ' ') %>%
tab_footnote(
footnote = "Values in these columns were estimated excluding data from 2020.",
locations = cells_column_labels(
columns = c(`Percent Change (95% CI)`,
`APC (95% CI)`,
`AAPC (95% CI)`
))
) %>%
tab_options(footnotes.marks = "*",
table.font.names = 'Times New Roman',
table.font.size = 12)
# Reorganize insurance variables
# proportion_table_sans_2020$`_data` <- proportion_table_sans_2020$`_data`[c(1:84,
#                                                                            85, 88, 86, 87,
#                                                                            89, 92, 90, 91,
#                                                                            93, 96, 94, 95,
#                                                                            97, 100, 98, 99,
#                                                                            101, 104, 102, 103,
#                                                                            105, 108, 106, 107,
#                                                                            109:nrow(proportion_table_sans_2020$`_data`)), ]
# prop_tab_sans_2020 <- proportion_table_sans_2020$`_data`
proportion_table_sans_2020 %>%
gtsave('table1.docx')
supplement_prop_tab <- prop_tab_sans_2020 %>%
select(
` `,
`Preventive service`,
`Average (SE)`,
`2008 (SE)`,
`2009 (SE)`,
`2010 (SE)`,
`2011 (SE)`,
`2012 (SE)`,
`2013 (SE)`,
`2014 (SE)`,
`2015 (SE)`,
`2016 (SE)`,
`2017 (SE)`,
`2018 (SE)`,
`2019 (SE)`,
`2020 (SE)`,
`Percent Change (95% CI)`,
`Joinpoint Year`,
`APC (95% CI)`,
`AAPC (95% CI)`,
-starts_with('APC Period')
) %>%
gt() %>%
sub_missing(missing_text = ' ') %>%
tab_footnote(
footnote = "Values in these columns were estimated excluding data from 2020.",
locations = cells_column_labels(
columns = c(`Percent Change (95% CI)`,
`APC (95% CI)`,
`AAPC (95% CI)`
))
) %>%
tab_options(footnotes.marks = "*",
table.font.names = 'Times New Roman',
table.font.size = 12)
prop_tab_sans_2020 <- rename(prop_tab_sans_2020, stratifier_column = ` `) %>%
janitor::clean_names()
proportion_table_sans_2020
tab_sans_2020
tab1
